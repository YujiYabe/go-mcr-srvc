package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// UserRole represents a row from 'public.user_roles'.
type UserRole struct {
	ID     int           `json:"id"`      // id
	UserID sql.NullInt64 `json:"user_id"` // user_id
	RoleID sql.NullInt64 `json:"role_id"` // role_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [UserRole] exists in the database.
func (ur *UserRole) Exists() bool {
	return ur._exists
}

// Deleted returns true when the [UserRole] has been marked for deletion
// from the database.
func (ur *UserRole) Deleted() bool {
	return ur._deleted
}

// Insert inserts the [UserRole] to the database.
func (ur *UserRole) Insert(ctx context.Context, db DB) error {
	switch {
	case ur._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ur._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.user_roles (` +
		`user_id, role_id` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, ur.UserID, ur.RoleID)
	if err := db.QueryRowContext(ctx, sqlstr, ur.UserID, ur.RoleID).Scan(&ur.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ur._exists = true
	return nil
}

// Update updates a [UserRole] in the database.
func (ur *UserRole) Update(ctx context.Context, db DB) error {
	switch {
	case !ur._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ur._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.user_roles SET ` +
		`user_id = $1, role_id = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, ur.UserID, ur.RoleID, ur.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ur.UserID, ur.RoleID, ur.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [UserRole] to the database.
func (ur *UserRole) Save(ctx context.Context, db DB) error {
	if ur.Exists() {
		return ur.Update(ctx, db)
	}
	return ur.Insert(ctx, db)
}

// Upsert performs an upsert for [UserRole].
func (ur *UserRole) Upsert(ctx context.Context, db DB) error {
	switch {
	case ur._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.user_roles (` +
		`id, user_id, role_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, role_id = EXCLUDED.role_id `
	// run
	logf(sqlstr, ur.ID, ur.UserID, ur.RoleID)
	if _, err := db.ExecContext(ctx, sqlstr, ur.ID, ur.UserID, ur.RoleID); err != nil {
		return logerror(err)
	}
	// set exists
	ur._exists = true
	return nil
}

// Delete deletes the [UserRole] from the database.
func (ur *UserRole) Delete(ctx context.Context, db DB) error {
	switch {
	case !ur._exists: // doesn't exist
		return nil
	case ur._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.user_roles ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ur.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ur.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ur._deleted = true
	return nil
}

// UserRoleByID retrieves a row from 'public.user_roles' as a [UserRole].
//
// Generated from index 'user_roles_pkey'.
func UserRoleByID(ctx context.Context, db DB, id int) (*UserRole, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, role_id ` +
		`FROM public.user_roles ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ur := UserRole{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ur.ID, &ur.UserID, &ur.RoleID); err != nil {
		return nil, logerror(err)
	}
	return &ur, nil
}

// Role returns the Role associated with the [UserRole]'s (RoleID).
//
// Generated from foreign key 'user_roles_role_id_fkey'.
func (ur *UserRole) Role(ctx context.Context, db DB) (*Role, error) {
	return RoleByID(ctx, db, int(ur.RoleID.Int64))
}

// User returns the User associated with the [UserRole]'s (UserID).
//
// Generated from foreign key 'user_roles_user_id_fkey'.
func (ur *UserRole) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, int(ur.UserID.Int64))
}
