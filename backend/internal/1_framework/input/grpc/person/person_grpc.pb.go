// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PersonClient is the client API for Person service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonClient interface {
	GetPersonByCondition(ctx context.Context, in *V1PersonParameter, opts ...grpc.CallOption) (*V1PersonParameter, error)
}

type personClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonClient(cc grpc.ClientConnInterface) PersonClient {
	return &personClient{cc}
}

func (c *personClient) GetPersonByCondition(ctx context.Context, in *V1PersonParameter, opts ...grpc.CallOption) (*V1PersonParameter, error) {
	out := new(V1PersonParameter)
	err := c.cc.Invoke(ctx, "/person.Person/GetPersonByCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServer is the server API for Person service.
// All implementations must embed UnimplementedPersonServer
// for forward compatibility
type PersonServer interface {
	GetPersonByCondition(context.Context, *V1PersonParameter) (*V1PersonParameter, error)
	mustEmbedUnimplementedPersonServer()
}

// UnimplementedPersonServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServer struct {
}

func (UnimplementedPersonServer) GetPersonByCondition(context.Context, *V1PersonParameter) (*V1PersonParameter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonByCondition not implemented")
}
func (UnimplementedPersonServer) mustEmbedUnimplementedPersonServer() {}

// UnsafePersonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServer will
// result in compilation errors.
type UnsafePersonServer interface {
	mustEmbedUnimplementedPersonServer()
}

func RegisterPersonServer(s *grpc.Server, srv PersonServer) {
	s.RegisterService(&_Person_serviceDesc, srv)
}

func _Person_GetPersonByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(V1PersonParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).GetPersonByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Person/GetPersonByCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).GetPersonByCondition(ctx, req.(*V1PersonParameter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Person_serviceDesc = grpc.ServiceDesc{
	ServiceName: "person.Person",
	HandlerType: (*PersonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonByCondition",
			Handler:    _Person_GetPersonByCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person.proto",
}
