// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/user_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "app/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUCUserRepository is a mock of UCUserRepository interface
type MockUCUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUCUserRepositoryMockRecorder
}

// MockUCUserRepositoryMockRecorder is the mock recorder for MockUCUserRepository
type MockUCUserRepositoryMockRecorder struct {
	mock *MockUCUserRepository
}

// NewMockUCUserRepository creates a new mock instance
func NewMockUCUserRepository(ctrl *gomock.Controller) *MockUCUserRepository {
	mock := &MockUCUserRepository{ctrl: ctrl}
	mock.recorder = &MockUCUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUCUserRepository) EXPECT() *MockUCUserRepositoryMockRecorder {
	return m.recorder
}

// IFDBFindByID mocks base method
func (m *MockUCUserRepository) IFDBFindByID(id int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IFDBFindByID", id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IFDBFindByID indicates an expected call of IFDBFindByID
func (mr *MockUCUserRepositoryMockRecorder) IFDBFindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IFDBFindByID", reflect.TypeOf((*MockUCUserRepository)(nil).IFDBFindByID), id)
}

// IFDBFindAll mocks base method
func (m *MockUCUserRepository) IFDBFindAll() (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IFDBFindAll")
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IFDBFindAll indicates an expected call of IFDBFindAll
func (mr *MockUCUserRepositoryMockRecorder) IFDBFindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IFDBFindAll", reflect.TypeOf((*MockUCUserRepository)(nil).IFDBFindAll))
}

// IFDBStore mocks base method
func (m *MockUCUserRepository) IFDBStore(arg0 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IFDBStore", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IFDBStore indicates an expected call of IFDBStore
func (mr *MockUCUserRepositoryMockRecorder) IFDBStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IFDBStore", reflect.TypeOf((*MockUCUserRepository)(nil).IFDBStore), arg0)
}

// IFDBUpdate mocks base method
func (m *MockUCUserRepository) IFDBUpdate(arg0 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IFDBUpdate", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IFDBUpdate indicates an expected call of IFDBUpdate
func (mr *MockUCUserRepositoryMockRecorder) IFDBUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IFDBUpdate", reflect.TypeOf((*MockUCUserRepository)(nil).IFDBUpdate), arg0)
}

// IFDBDeleteByID mocks base method
func (m *MockUCUserRepository) IFDBDeleteByID(arg0 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IFDBDeleteByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IFDBDeleteByID indicates an expected call of IFDBDeleteByID
func (mr *MockUCUserRepositoryMockRecorder) IFDBDeleteByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IFDBDeleteByID", reflect.TypeOf((*MockUCUserRepository)(nil).IFDBDeleteByID), arg0)
}
