// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/database/sql_handler.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockIFDBSQLHandler is a mock of IFDBSQLHandler interface
type MockIFDBSQLHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIFDBSQLHandlerMockRecorder
}

// MockIFDBSQLHandlerMockRecorder is the mock recorder for MockIFDBSQLHandler
type MockIFDBSQLHandlerMockRecorder struct {
	mock *MockIFDBSQLHandler
}

// NewMockIFDBSQLHandler creates a new mock instance
func NewMockIFDBSQLHandler(ctrl *gomock.Controller) *MockIFDBSQLHandler {
	mock := &MockIFDBSQLHandler{ctrl: ctrl}
	mock.recorder = &MockIFDBSQLHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFDBSQLHandler) EXPECT() *MockIFDBSQLHandlerMockRecorder {
	return m.recorder
}

// INFRExec mocks base method
func (m *MockIFDBSQLHandler) INFRExec(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "INFRExec", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// INFRExec indicates an expected call of INFRExec
func (mr *MockIFDBSQLHandlerMockRecorder) INFRExec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "INFRExec", reflect.TypeOf((*MockIFDBSQLHandler)(nil).INFRExec), varargs...)
}

// INFRFind mocks base method
func (m *MockIFDBSQLHandler) INFRFind(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "INFRFind", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// INFRFind indicates an expected call of INFRFind
func (mr *MockIFDBSQLHandlerMockRecorder) INFRFind(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "INFRFind", reflect.TypeOf((*MockIFDBSQLHandler)(nil).INFRFind), varargs...)
}

// INFRFirst mocks base method
func (m *MockIFDBSQLHandler) INFRFirst(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "INFRFirst", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// INFRFirst indicates an expected call of INFRFirst
func (mr *MockIFDBSQLHandlerMockRecorder) INFRFirst(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "INFRFirst", reflect.TypeOf((*MockIFDBSQLHandler)(nil).INFRFirst), varargs...)
}

// INFRRaw mocks base method
func (m *MockIFDBSQLHandler) INFRRaw(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "INFRRaw", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// INFRRaw indicates an expected call of INFRRaw
func (mr *MockIFDBSQLHandlerMockRecorder) INFRRaw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "INFRRaw", reflect.TypeOf((*MockIFDBSQLHandler)(nil).INFRRaw), varargs...)
}

// INFRCreate mocks base method
func (m *MockIFDBSQLHandler) INFRCreate(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "INFRCreate", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// INFRCreate indicates an expected call of INFRCreate
func (mr *MockIFDBSQLHandlerMockRecorder) INFRCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "INFRCreate", reflect.TypeOf((*MockIFDBSQLHandler)(nil).INFRCreate), arg0)
}

// INFRSave mocks base method
func (m *MockIFDBSQLHandler) INFRSave(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "INFRSave", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// INFRSave indicates an expected call of INFRSave
func (mr *MockIFDBSQLHandlerMockRecorder) INFRSave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "INFRSave", reflect.TypeOf((*MockIFDBSQLHandler)(nil).INFRSave), arg0)
}

// INFRDelete mocks base method
func (m *MockIFDBSQLHandler) INFRDelete(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "INFRDelete", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// INFRDelete indicates an expected call of INFRDelete
func (mr *MockIFDBSQLHandlerMockRecorder) INFRDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "INFRDelete", reflect.TypeOf((*MockIFDBSQLHandler)(nil).INFRDelete), arg0)
}

// INFRWhere mocks base method
func (m *MockIFDBSQLHandler) INFRWhere(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "INFRWhere", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// INFRWhere indicates an expected call of INFRWhere
func (mr *MockIFDBSQLHandlerMockRecorder) INFRWhere(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "INFRWhere", reflect.TypeOf((*MockIFDBSQLHandler)(nil).INFRWhere), varargs...)
}
